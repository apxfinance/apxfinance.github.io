{"ast":null,"code":"var _jsxFileName = \"/Users/eduarddriessen/Documents/GitHub/apx/src/views/Bonds/Bonds.tsx\";\nimport React, { useCallback, useMemo } from 'react';\nimport Page from '../../components/Page';\nimport { createGlobalStyle } from 'styled-components';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport ExchangeCard from './components/ExchangeCard';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport useBondStats from '../../hooks/useBondStats';\nimport useTombFinance from '../../hooks/useTombFinance';\nimport useCashPriceInLastTWAP from '../../hooks/useCashPriceInLastTWAP';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport ExchangeStat from './components/ExchangeStat';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useBondsPurchasable from '../../hooks/useBondsPurchasable';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport { BOND_REDEEM_PRICE, BOND_REDEEM_PRICE_BN } from '../../tomb-finance/constants';\nconst BackgroundImage = createGlobalStyle`\n  body {\n    // background-size: cover !important;\n    background-color: #131127;\n  }\n`;\n\nconst Bonds = () => {\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    account\n  } = useWallet();\n  const tombFinance = useTombFinance();\n  const addTransaction = useTransactionAdder();\n  const bondStat = useBondStats();\n  const cashPrice = useCashPriceInLastTWAP();\n  const bondsPurchasable = useBondsPurchasable();\n  const bondBalance = useTokenBalance(tombFinance === null || tombFinance === void 0 ? void 0 : tombFinance.ABOND);\n  const handleBuyBonds = useCallback(async amount => {\n    const tx = await tombFinance.buyBonds(amount);\n    addTransaction(tx, {\n      summary: `Buy ${Number(amount).toFixed(2)} ABOND with ${amount} APEX`\n    });\n  }, [tombFinance, addTransaction]);\n  const handleRedeemBonds = useCallback(async amount => {\n    const tx = await tombFinance.redeemBonds(amount);\n    addTransaction(tx, {\n      summary: `Redeem ${amount} ABOND`\n    });\n  }, [tombFinance, addTransaction]);\n  const isBondRedeemable = useMemo(() => cashPrice.gt(BOND_REDEEM_PRICE_BN), [cashPrice]);\n  const isBondPurchasable = useMemo(() => Number(bondStat === null || bondStat === void 0 ? void 0 : bondStat.tokenInFtm) < 1.01, [bondStat]);\n  return /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Page, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BackgroundImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), !!account ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StyledBond, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StyledCardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ExchangeCard, {\n    action: \"Purchase\",\n    fromToken: tombFinance.APEX,\n    fromTokenName: \"APEX\",\n    toToken: tombFinance.ABOND,\n    toTokenName: \"ABOND\",\n    priceDesc: !isBondPurchasable ? 'APEX is over peg' : getDisplayBalance(bondsPurchasable, 18, 4) + ' ABOND available for purchase',\n    onExchange: handleBuyBonds,\n    disabled: !bondStat || isBondRedeemable,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(StyledStatsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ExchangeStat, {\n    tokenName: \"APEX\",\n    description: \"Last-Hour TWAP Price\",\n    price: getDisplayBalance(cashPrice, 18, 4),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Spacer, {\n    size: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(ExchangeStat, {\n    tokenName: \"ABOND\",\n    description: \"Current Price: (APEX)^2\",\n    price: Number(bondStat === null || bondStat === void 0 ? void 0 : bondStat.tokenInFtm).toFixed(2) || '-',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(StyledCardWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ExchangeCard, {\n    action: \"Redeem\",\n    fromToken: tombFinance.ABOND,\n    fromTokenName: \"ABOND\",\n    toToken: tombFinance.APEX,\n    toTokenName: \"APEX\",\n    priceDesc: `${getDisplayBalance(bondBalance)} ABOND Available in wallet`,\n    onExchange: handleRedeemBonds,\n    disabled: !bondStat || bondBalance.eq(0) || !isBondRedeemable,\n    disabledDescription: !isBondRedeemable ? `Enabled when APEX > ${BOND_REDEEM_PRICE}FTM` : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  })))))) : /*#__PURE__*/React.createElement(UnlockWallet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst StyledBond = styled.div`\n  display: flex;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\nconst StyledStatsWrapper = styled.div`\n  display: flex;\n  flex: 0.8;\n  margin: 0 20px;\n  flex-direction: column;\n\n  @media (max-width: 768px) {\n    width: 80%;\n    margin: 16px 0;\n  }\n`;\nexport default Bonds;","map":{"version":3,"sources":["/Users/eduarddriessen/Documents/GitHub/apx/src/views/Bonds/Bonds.tsx"],"names":["React","useCallback","useMemo","Page","createGlobalStyle","Route","Switch","useRouteMatch","useWallet","UnlockWallet","ExchangeCard","styled","Spacer","useBondStats","useTombFinance","useCashPriceInLastTWAP","useTransactionAdder","ExchangeStat","useTokenBalance","useBondsPurchasable","getDisplayBalance","BOND_REDEEM_PRICE","BOND_REDEEM_PRICE_BN","BackgroundImage","Bonds","path","account","tombFinance","addTransaction","bondStat","cashPrice","bondsPurchasable","bondBalance","ABOND","handleBuyBonds","amount","tx","buyBonds","summary","Number","toFixed","handleRedeemBonds","redeemBonds","isBondRedeemable","gt","isBondPurchasable","tokenInFtm","APEX","eq","StyledBond","div","StyledCardWrapper","StyledStatsWrapper"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AAEA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,aAAxB,QAA6C,kBAA7C;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,sBAAP,MAAmC,oCAAnC;AACA,SAASC,mBAAT,QAAoC,gCAApC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,QAAwD,8BAAxD;AAGA,MAAMC,eAAe,GAAGnB,iBAAkB;AAC1C;AACA;AACA;AACA;AACA,CALA;;AAOA,MAAMoB,KAAe,GAAG,MAAM;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAWlB,aAAa,EAA9B;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAclB,SAAS,EAA7B;AACA,QAAMmB,WAAW,GAAGb,cAAc,EAAlC;AACA,QAAMc,cAAc,GAAGZ,mBAAmB,EAA1C;AACA,QAAMa,QAAQ,GAAGhB,YAAY,EAA7B;AACA,QAAMiB,SAAS,GAAGf,sBAAsB,EAAxC;AACA,QAAMgB,gBAAgB,GAAGZ,mBAAmB,EAA5C;AAEA,QAAMa,WAAW,GAAGd,eAAe,CAACS,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEM,KAAd,CAAnC;AAEA,QAAMC,cAAc,GAAGjC,WAAW,CAChC,MAAOkC,MAAP,IAA0B;AACxB,UAAMC,EAAE,GAAG,MAAMT,WAAW,CAACU,QAAZ,CAAqBF,MAArB,CAAjB;AACAP,IAAAA,cAAc,CAACQ,EAAD,EAAK;AACjBE,MAAAA,OAAO,EAAG,OAAMC,MAAM,CAACJ,MAAD,CAAN,CAAeK,OAAf,CAAuB,CAAvB,CAA0B,eAAcL,MAAO;AAD9C,KAAL,CAAd;AAGD,GAN+B,EAOhC,CAACR,WAAD,EAAcC,cAAd,CAPgC,CAAlC;AAUA,QAAMa,iBAAiB,GAAGxC,WAAW,CACnC,MAAOkC,MAAP,IAA0B;AACxB,UAAMC,EAAE,GAAG,MAAMT,WAAW,CAACe,WAAZ,CAAwBP,MAAxB,CAAjB;AACAP,IAAAA,cAAc,CAACQ,EAAD,EAAK;AAAEE,MAAAA,OAAO,EAAG,UAASH,MAAO;AAA5B,KAAL,CAAd;AACD,GAJkC,EAKnC,CAACR,WAAD,EAAcC,cAAd,CALmC,CAArC;AAOA,QAAMe,gBAAgB,GAAGzC,OAAO,CAAC,MAAM4B,SAAS,CAACc,EAAV,CAAatB,oBAAb,CAAP,EAA2C,CAACQ,SAAD,CAA3C,CAAhC;AACA,QAAMe,iBAAiB,GAAG3C,OAAO,CAAC,MAAMqC,MAAM,CAACV,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEiB,UAAX,CAAN,GAA+B,IAAtC,EAA4C,CAACjB,QAAD,CAA5C,CAAjC;AAEA,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEG,CAAC,CAACH,OAAF,gBACC,uDACE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAED,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,MAAM,EAAC,UADX;AAEI,IAAA,SAAS,EAAEE,WAAW,CAACoB,IAF3B;AAGI,IAAA,aAAa,EAAC,MAHlB;AAII,IAAA,OAAO,EAAEpB,WAAW,CAACM,KAJzB;AAKI,IAAA,WAAW,EAAC,OALhB;AAMI,IAAA,SAAS,EACL,CAACY,iBAAD,GACM,kBADN,GAEMzB,iBAAiB,CAACW,gBAAD,EAAmB,EAAnB,EAAuB,CAAvB,CAAjB,GAA6C,+BAT3D;AAWI,IAAA,UAAU,EAAEG,cAXhB;AAYI,IAAA,QAAQ,EAAE,CAACL,QAAD,IAAac,gBAZ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAiBI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,WAAW,EAAC,sBAFhB;AAGI,IAAA,KAAK,EAAEvB,iBAAiB,CAACU,SAAD,EAAY,EAAZ,EAAgB,CAAhB,CAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAOI,oBAAC,YAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,WAAW,EAAC,yBAFhB;AAGI,IAAA,KAAK,EAAES,MAAM,CAACV,QAAD,aAACA,QAAD,uBAACA,QAAQ,CAAEiB,UAAX,CAAN,CAA6BN,OAA7B,CAAqC,CAArC,KAA2C,GAHtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAjBJ,eA8BI,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,MAAM,EAAC,QADX;AAEI,IAAA,SAAS,EAAEb,WAAW,CAACM,KAF3B;AAGI,IAAA,aAAa,EAAC,OAHlB;AAII,IAAA,OAAO,EAAEN,WAAW,CAACoB,IAJzB;AAKI,IAAA,WAAW,EAAC,MALhB;AAMI,IAAA,SAAS,EAAG,GAAE3B,iBAAiB,CAACY,WAAD,CAAc,4BANjD;AAOI,IAAA,UAAU,EAAES,iBAPhB;AAQI,IAAA,QAAQ,EAAE,CAACZ,QAAD,IAAaG,WAAW,CAACgB,EAAZ,CAAe,CAAf,CAAb,IAAkC,CAACL,gBARjD;AASI,IAAA,mBAAmB,EAAE,CAACA,gBAAD,GAAqB,uBAAsBtB,iBAAkB,KAA7D,GAAoE,IAT7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CA9BJ,CADA,CADJ,CADF,CADD,gBAoDC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtDJ,CADF,CADF;AA6DD,CA5FD;;AA8FA,MAAM4B,UAAU,GAAGtC,MAAM,CAACuC,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMC,iBAAiB,GAAGxC,MAAM,CAACuC,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAME,kBAAkB,GAAGzC,MAAM,CAACuC,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,eAAe1B,KAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport Page from '../../components/Page';\nimport PitImage from '../../assets/img/pit.png';\nimport { createGlobalStyle } from 'styled-components';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { useWallet } from 'use-wallet';\nimport UnlockWallet from '../../components/UnlockWallet';\nimport PageHeader from '../../components/PageHeader';\nimport ExchangeCard from './components/ExchangeCard';\nimport styled from 'styled-components';\nimport Spacer from '../../components/Spacer';\nimport useBondStats from '../../hooks/useBondStats';\nimport useTombFinance from '../../hooks/useTombFinance';\nimport useCashPriceInLastTWAP from '../../hooks/useCashPriceInLastTWAP';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport ExchangeStat from './components/ExchangeStat';\nimport useTokenBalance from '../../hooks/useTokenBalance';\nimport useBondsPurchasable from '../../hooks/useBondsPurchasable';\nimport { getDisplayBalance } from '../../utils/formatBalance';\nimport { BOND_REDEEM_PRICE, BOND_REDEEM_PRICE_BN } from '../../tomb-finance/constants';\nimport {Typography} from \"@material-ui/core\";\n\nconst BackgroundImage = createGlobalStyle`\n  body {\n    // background-size: cover !important;\n    background-color: #131127;\n  }\n`;\n\nconst Bonds: React.FC = () => {\n  const { path } = useRouteMatch();\n  const { account } = useWallet();\n  const tombFinance = useTombFinance();\n  const addTransaction = useTransactionAdder();\n  const bondStat = useBondStats();\n  const cashPrice = useCashPriceInLastTWAP();\n  const bondsPurchasable = useBondsPurchasable();\n\n  const bondBalance = useTokenBalance(tombFinance?.ABOND);\n\n  const handleBuyBonds = useCallback(\n    async (amount: string) => {\n      const tx = await tombFinance.buyBonds(amount);\n      addTransaction(tx, {\n        summary: `Buy ${Number(amount).toFixed(2)} ABOND with ${amount} APEX`,\n      });\n    },\n    [tombFinance, addTransaction],\n  );\n\n  const handleRedeemBonds = useCallback(\n    async (amount: string) => {\n      const tx = await tombFinance.redeemBonds(amount);\n      addTransaction(tx, { summary: `Redeem ${amount} ABOND` });\n    },\n    [tombFinance, addTransaction],\n  );\n  const isBondRedeemable = useMemo(() => cashPrice.gt(BOND_REDEEM_PRICE_BN), [cashPrice]);\n  const isBondPurchasable = useMemo(() => Number(bondStat?.tokenInFtm) < 1.01, [bondStat]);\n\n  return (\n    <Switch>\n      <Page>\n        <BackgroundImage />\n        {!!account ? (\n          <>\n            <Route exact path={path}>\n                <Container maxWidth=\"lg\">\n                <StyledBond>\n                    <StyledCardWrapper>\n                        <ExchangeCard\n                            action=\"Purchase\"\n                            fromToken={tombFinance.APEX}\n                            fromTokenName=\"APEX\"\n                            toToken={tombFinance.ABOND}\n                            toTokenName=\"ABOND\"\n                            priceDesc={\n                                !isBondPurchasable\n                                    ? 'APEX is over peg'\n                                    : getDisplayBalance(bondsPurchasable, 18, 4) + ' ABOND available for purchase'\n                            }\n                            onExchange={handleBuyBonds}\n                            disabled={!bondStat || isBondRedeemable}\n                        />\n                    </StyledCardWrapper>\n                    <StyledStatsWrapper>\n                        <ExchangeStat\n                            tokenName=\"APEX\"\n                            description=\"Last-Hour TWAP Price\"\n                            price={getDisplayBalance(cashPrice, 18, 4)}\n                        />\n                        <Spacer size=\"md\" />\n                        <ExchangeStat\n                            tokenName=\"ABOND\"\n                            description=\"Current Price: (APEX)^2\"\n                            price={Number(bondStat?.tokenInFtm).toFixed(2) || '-'}\n                        />\n                    </StyledStatsWrapper>\n                    <StyledCardWrapper>\n                        <ExchangeCard\n                            action=\"Redeem\"\n                            fromToken={tombFinance.ABOND}\n                            fromTokenName=\"ABOND\"\n                            toToken={tombFinance.APEX}\n                            toTokenName=\"APEX\"\n                            priceDesc={`${getDisplayBalance(bondBalance)} ABOND Available in wallet`}\n                            onExchange={handleRedeemBonds}\n                            disabled={!bondStat || bondBalance.eq(0) || !isBondRedeemable}\n                            disabledDescription={!isBondRedeemable ? `Enabled when APEX > ${BOND_REDEEM_PRICE}FTM` : null}\n                        />\n                    </StyledCardWrapper>\n                </StyledBond>\n                </Container>\n            </Route>\n          </>\n        ) : (\n          <UnlockWallet />\n        )}\n      </Page>\n    </Switch>\n  );\n};\n\nconst StyledBond = styled.div`\n  display: flex;\n  @media (max-width: 768px) {\n    width: 100%;\n    flex-flow: column nowrap;\n    align-items: center;\n  }\n`;\n\nconst StyledCardWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  @media (max-width: 768px) {\n    width: 80%;\n  }\n`;\n\nconst StyledStatsWrapper = styled.div`\n  display: flex;\n  flex: 0.8;\n  margin: 0 20px;\n  flex-direction: column;\n\n  @media (max-width: 768px) {\n    width: 80%;\n    margin: 16px 0;\n  }\n`;\n\nexport default Bonds;\n"]},"metadata":{},"sourceType":"module"}