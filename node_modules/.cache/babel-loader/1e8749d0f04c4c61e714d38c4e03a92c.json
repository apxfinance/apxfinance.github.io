{"ast":null,"code":"import { BigNumber } from 'ethers';\nexport const getDisplayBalance = (balance, decimals = 18, fractionDigits = 4, isTruncated = false) => {\n  if (decimals === 0) {\n    fractionDigits = 0;\n  }\n\n  const number = getBalance(balance, decimals - fractionDigits);\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\n\n  if (ret.length > 12 && isTruncated) {\n    return ret.slice(0, 12) + '...';\n  }\n\n  return ret;\n};\nexport const getFullDisplayBalance = (balance, decimals = 18, isTruncated = false) => {\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\n};\nexport function getBalance(balance, decimals = 18) {\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\n}","map":{"version":3,"sources":["/Users/eduarddriessen/Documents/GitHub/apx/src/utils/formatBalance.ts"],"names":["BigNumber","getDisplayBalance","balance","decimals","fractionDigits","isTruncated","number","getBalance","ret","toFixed","length","slice","getFullDisplayBalance","Number","div","from","pow"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,OAD+B,EAE/BC,QAAQ,GAAG,EAFoB,EAG/BC,cAAc,GAAG,CAHc,EAI/BC,WAAoB,GAAG,KAJQ,KAK5B;AACH,MAAIF,QAAQ,KAAK,CAAjB,EAAoB;AAClBC,IAAAA,cAAc,GAAG,CAAjB;AACD;;AACD,QAAME,MAAM,GAAGC,UAAU,CAACL,OAAD,EAAUC,QAAQ,GAAGC,cAArB,CAAzB;AACA,QAAMI,GAAG,GAAG,CAACF,MAAM,GAAG,MAAMF,cAAhB,EAAgCK,OAAhC,CAAwCL,cAAxC,CAAZ;;AACA,MAAII,GAAG,CAACE,MAAJ,GAAa,EAAb,IAAmBL,WAAvB,EAAoC;AAClC,WAAOG,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAa,EAAb,IAAmB,KAA1B;AACD;;AACD,SAAOH,GAAP;AACD,CAfM;AAiBP,OAAO,MAAMI,qBAAqB,GAAG,CAACV,OAAD,EAAqBC,QAAQ,GAAG,EAAhC,EAAoCE,WAAW,GAAG,KAAlD,KAA4D;AAC/F,SAAOJ,iBAAiB,CAACC,OAAD,EAAUC,QAAV,EAAoB,CAApB,EAAuBE,WAAvB,CAAxB;AACD,CAFM;AAIP,OAAO,SAASE,UAAT,CAAoBL,OAApB,EAAwCC,QAAQ,GAAG,EAAnD,EAA+D;AACpE,SAAOU,MAAM,CAACX,OAAO,CAACY,GAAR,CAAYd,SAAS,CAACe,IAAV,CAAe,EAAf,EAAmBC,GAAnB,CAAuBb,QAAvB,CAAZ,CAAD,CAAb;AACD","sourcesContent":["import { BigNumber } from 'ethers';\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 4,\n  isTruncated: boolean = false,\n) => {\n  if (decimals === 0) {\n    fractionDigits = 0;\n  }\n  const number = getBalance(balance, decimals - fractionDigits);\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\n  if (ret.length > 12 && isTruncated) {\n    return ret.slice(0, 12) + '...';\n  }\n  return ret;\n};\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\n};\n\nexport function getBalance(balance: BigNumber, decimals = 18): number {\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\n}\n"]},"metadata":{},"sourceType":"module"}